name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: 🌍 Deploy to flowcab.fr
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install

      # Le build sera fait côté serveur avec les variables d'environnement locales

      - name: 📁 Create deployment archive
        run: |
          tar -czf taxi-manager-deploy.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.github \
            --exclude=.next \
            .

      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📤 Deploy to server
        run: |
          # Configuration SSH
          ssh-keyscan -H 69.62.108.105 >> ~/.ssh/known_hosts
          
          # Transfer de l'archive
          scp taxi-manager-deploy.tar.gz root@69.62.108.105:~/taxi-manager-new.tar.gz
          
          # Déploiement sur le serveur
          ssh root@69.62.108.105 << 'EOF'
            set -e
            
            echo "🚀 Début du déploiement..."
            
            # Backup de l'ancienne version
            if [ -d "/var/www/app.flowcab.fr" ]; then
              cp -r /var/www/app.flowcab.fr /var/www/app.flowcab.fr.backup.$(date +%Y%m%d-%H%M%S)
            fi
            
            # Création du répertoire temporaire
            mkdir -p /var/www/app.flowcab.fr.new
            cd /var/www/app.flowcab.fr.new
            
            # Extraction de la nouvelle version
            tar -xzf ~/taxi-manager-new.tar.gz
            
            # Conservation des variables d'environnement
            if [ -f "/var/www/app.flowcab.fr/.env.production.local" ]; then
              cp /var/www/app.flowcab.fr/.env.production.local .env.production.local
            fi
            
            # Installation de toutes les dépendances
            pnpm install
            
            # Nettoyage du cache Next.js
            rm -rf .next
            
            # Build de production sur le serveur
            NODE_ENV=production pnpm build
            
            # Libérer le port 3000
            lsof -ti:3000 | xargs kill -9 || true
            
            # Arrêt de l'ancienne version
            pm2 stop taxi-manager || true
            
            # Correction des permissions avant remplacement
            chown -R root:root /var/www/app.flowcab.fr.new
            
            # Remplacement atomique
            if [ -d "/var/www/app.flowcab.fr" ]; then
              mv /var/www/app.flowcab.fr /var/www/app.flowcab.fr.old
            fi
            mv /var/www/app.flowcab.fr.new /var/www/app.flowcab.fr
            
            # Copie de la configuration PM2
            cd /var/www/app.flowcab.fr
            if [ ! -f "ecosystem.config.js" ]; then
              cp ~/ecosystem.config.js .
            fi
            
            # Relancement de l'application
            pm2 start ecosystem.config.js || pm2 restart taxi-manager
            pm2 save
            
            # Nettoyage
            rm -f ~/taxi-manager-new.tar.gz
            rm -rf /var/www/app.flowcab.fr.old
            
            echo "✅ Déploiement terminé avec succès!"
          EOF

      - name: 🧪 Test deployment
        run: |
          sleep 10
          curl -f -L -I http://app.flowcab.fr || exit 1
          echo "✅ Application accessible sur app.flowcab.fr"

      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "❌ Déploiement échoué - vérifiez les logs"