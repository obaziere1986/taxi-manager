name: 🚀 Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: 🌍 Deploy to flowcab.fr
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install

      # Le build sera fait côté serveur avec les variables d'environnement locales

      - name: 📁 Create deployment archive
        run: |
          # Utilisation de git archive pour éviter complètement les conflits tar
          # Ne prend que les fichiers suivis par git, aucun conflit possible
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git archive --format=tar HEAD | gzip > taxi-manager-deploy.tar.gz

      - name: 🔑 Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 📤 Deploy to server
        shell: bash
        run: |
          set -Eeuo pipefail
          ssh-keyscan -H 69.62.108.105 >> ~/.ssh/known_hosts
          scp taxi-manager-deploy.tar.gz root@69.62.108.105:/root/taxi-manager-new.tar.gz
          
          # Création du fichier env temporaire
          echo "NODE_ENV=production" > temp_env.txt
          echo "NEXTAUTH_URL=https://app.flowcab.fr" >> temp_env.txt
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> temp_env.txt
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> temp_env.txt
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> temp_env.txt
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> temp_env.txt
          
          # Transfer du fichier env
          scp temp_env.txt root@69.62.108.105:/root/temp_env.txt
          rm temp_env.txt
          
          ssh -T root@69.62.108.105 <<'EOSSH'
set -Eeuo pipefail

echo "🚀 Début du déploiement..."

# Backup si présent
if [ -d "/var/www/app.flowcab.fr" ]; then
  cp -r /var/www/app.flowcab.fr /var/www/app.flowcab.fr.backup.$(date +%Y%m%d-%H%M%S)
fi

# Dossier temporaire
rm -rf /var/www/app.flowcab.fr.new
mkdir -p /var/www/app.flowcab.fr.new
cd /var/www/app.flowcab.fr.new

# Extraction
tar -xzf /root/taxi-manager-new.tar.gz

# Variables d'environnement
cp /root/temp_env.txt .env.production.local
rm /root/temp_env.txt

# Dépendances + build
pnpm install
rm -rf .next
NODE_ENV=production pnpm build

# Libérer port 3000 (sans bruit)
lsof -ti:3000 | xargs -r kill -9 || true

# Swap atomique
pm2 stop taxi-manager || true
chown -R root:root /var/www/app.flowcab.fr.new
if [ -d "/var/www/app.flowcab.fr" ]; then
  mv /var/www/app.flowcab.fr /var/www/app.flowcab.fr.old
fi
mv /var/www/app.flowcab.fr.new /var/www/app.flowcab.fr

# PM2
cd /var/www/app.flowcab.fr
if [ ! -f "ecosystem.config.js" ]; then
  cp ~/ecosystem.config.js .
fi
pm2 start ecosystem.config.js || pm2 restart taxi-manager
pm2 save

# Nettoyage
rm -f /root/taxi-manager-new.tar.gz
rm -rf /var/www/app.flowcab.fr.old || true

echo "✅ Déploiement terminé avec succès!"
EOSSH

      - name: 🧪 Test deployment
        run: |
          sleep 10
          curl -f -L -I http://app.flowcab.fr || exit 1
          echo "✅ Application accessible sur app.flowcab.fr"

      - name: 📧 Notify on failure
        if: failure()
        run: |
          echo "❌ Déploiement échoué - vérifiez les logs"