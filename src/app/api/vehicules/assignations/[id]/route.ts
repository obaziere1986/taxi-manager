import { NextRequest, NextResponse } from 'next/server'
import { executeWithRetry } from '@/lib/supabase'

export async function DELETE(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    console.log('üîÑ DELETE API - Fonction appel√©e')
    
    const params = await context.params
    const assignationId = params.id
    
    // Test rapide pour voir si l'API fonctionne
    console.log('üîÑ DELETE API - Test assignationId:', assignationId)
    
    if (!assignationId) {
      return NextResponse.json({ error: 'ID manquant' }, { status: 400 })
    }
    
    if (assignationId === 'test-invalid-id') {
      return NextResponse.json({ error: 'Test ID invalide' }, { status: 404 })
    }
    
    const timestamp = new Date().toISOString()
    console.log(`üîÑ [${timestamp}] D√âSASSIGNATION - D√©but pour ID:`, assignationId)

    console.log(`üîÑ [${timestamp}] D√âSASSIGNATION - Recherche assignation...`)
    
    // V√©rifier que l'assignation existe
    const assignation = await executeWithRetry(async (supabase) => {
      const { data, error } = await supabase
        .from('vehicule_assignations')
        .select(`
          *,
          vehicule:vehicules(*),
          user:users(
            id,
            nom,
            prenom,
            role
          )
        `)
        .eq('id', assignationId)
        .single()
      
      if (error && error.code !== 'PGRST116') throw error
      return data
    })

    if (!assignation) {
      console.log(`‚ùå [${timestamp}] D√âSASSIGNATION - Assignation non trouv√©e:`, assignationId)
      return NextResponse.json(
        { error: 'Assignation non trouv√©e' },
        { status: 404 }
      )
    }

    const vehiculeInfo = `${assignation.vehicule.marque} ${assignation.vehicule.modele} (${assignation.vehicule.immatriculation})`
    const personneInfo = `Utilisateur: ${assignation.user.prenom} ${assignation.user.nom} (${assignation.user.role})`

    console.log(`‚úÖ [${timestamp}] D√âSASSIGNATION - Assignation trouv√©e:`)
    console.log(`   üìã V√©hicule: ${vehiculeInfo}`)
    console.log(`   üë§ Assign√© √†: ${personneInfo}`)
    console.log(`   üìÖ Date d√©but: ${assignation.date_debut}`)
    console.log(`   ‚úÖ Statut actuel: ${assignation.actif ? 'ACTIF' : 'INACTIF'}`)

    const dateFin = new Date()

    // Marquer l'assignation comme inactive
    console.log(`üîÑ [${timestamp}] D√âSASSIGNATION - Marquage comme inactive...`)
    const updatedAssignation = await executeWithRetry(async (supabase) => {
      const { data, error } = await supabase
        .from('vehicule_assignations')
        .update({
          actif: false,
          date_fin: dateFin.toISOString()
        })
        .eq('id', assignationId)
        .select()
        .single()
      
      if (error) throw error
      return data
    })

    // Nettoyer la r√©f√©rence v√©hicule de l'utilisateur
    if (assignation.user_id) {
      console.log(`üîß [${timestamp}] D√âSASSIGNATION - Nettoyage r√©f√©rence v√©hicule de l'utilisateur ${assignation.user.prenom} ${assignation.user.nom}`)
      await executeWithRetry(async (supabase) => {
        const { error } = await supabase
          .from('users')
          .update({
            vehicule_id: null
          })
          .eq('id', assignation.user_id)
        
        if (error) throw error
      })
      console.log(`‚úÖ [${timestamp}] D√âSASSIGNATION - Utilisateur ${assignation.user.prenom} ${assignation.user.nom} lib√©r√© du v√©hicule ${vehiculeInfo}`)
    }

    console.log(`üéâ [${timestamp}] D√âSASSIGNATION - Termin√©e avec succ√®s pour:`)
    console.log(`   üìã V√©hicule: ${vehiculeInfo}`)
    console.log(`   üë§ Anciennement assign√© √†: ${personneInfo}`)
    console.log(`   üìÖ P√©riode: ${assignation.date_debut} ‚Üí ${dateFin.toISOString()}`)
    
    // Ajouter les champs manquants pour compatibilit√©
    const responseAssignation = {
      ...updatedAssignation,
      dateDebut: updatedAssignation.date_debut,
      dateFin: updatedAssignation.date_fin,
      userId: updatedAssignation.user_id,
      vehiculeId: updatedAssignation.vehicule_id
    }

    return NextResponse.json(
      { 
        message: 'V√©hicule d√©sassign√© avec succ√®s',
        assignation: responseAssignation
      }, 
      { status: 200 }
    )
  } catch (error) {
    const timestamp = new Date().toISOString()
    
    if (error instanceof Error && error.message === 'ASSIGNATION_NOT_FOUND') {
      console.log(`‚ùå [${timestamp}] D√âSASSIGNATION - Assignation non trouv√©e:`, assignationId)
      return NextResponse.json(
        { error: 'Assignation non trouv√©e' },
        { status: 404 }
      )
    }
    
    console.error(`üí• [${timestamp}] D√âSASSIGNATION - Erreur critique:`, error)
    console.error('Stack trace:', error instanceof Error ? error.stack : 'Pas de stack')
    console.error('Context:', { assignationId, timestamp })
    
    return NextResponse.json(
      { error: 'Erreur lors de la d√©sassignation' },
      { status: 500 }
    )
  }
}