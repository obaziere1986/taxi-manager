// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(cuid())
  nom       String
  prenom    String
  telephone String
  email     String?
  adresses  Json?    // Pour stocker les adresses fréquentes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courses   Course[]
  avis      AvisClient[]
}

// Model Chauffeur supprimé - maintenant géré par User avec role = 'Chauffeur'

model Course {
  id          String      @id @default(cuid())
  origine     String
  destination String
  dateHeure   DateTime
  statut      StatutCourse @default(EN_ATTENTE)
  prix        Float?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  clientId    String
  client      Client      @relation(fields: [clientId], references: [id])
  
  // Chauffeur maintenant géré via User
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])
  
  avis        AvisClient[]
}

enum StatutCourse {
  EN_ATTENTE
  ASSIGNEE
  EN_COURS
  TERMINEE
  ANNULEE
}

enum StatutPersonne {
  DISPONIBLE
  OCCUPE
  HORS_SERVICE
}

enum RoleUtilisateur {
  Admin
  Planner
  Chauffeur
}

model User {
  id        String          @id @default(cuid())
  nom       String
  prenom    String
  email     String          @unique
  telephone String
  role      RoleUtilisateur @default(Chauffeur)
  statut    StatutPersonne? @default(DISPONIBLE)
  actif     Boolean         @default(true)
  
  // Informations véhicule (pour les chauffeurs)
  vehicule    String?
  vehiculeId  String?
  vehiculeObj Vehicule? @relation(fields: [vehiculeId], references: [id])
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  courses      Course[]
  assignations VehiculeAssignation[]
}

model Vehicule {
  id             String   @id @default(cuid())
  marque         String
  modele         String
  immatriculation String  @unique
  couleur        String?
  annee          Int?
  actif          Boolean  @default(true)
  
  // Informations techniques
  kilometrage    Int?     @default(0)
  carburant      String?  // ESSENCE, DIESEL, HYBRIDE, ELECTRIQUE
  
  // Prochaines dates d'entretien
  prochaineVidange    DateTime?
  prochainEntretien  DateTime?
  prochainControleTechnique DateTime?
  
  // Métadonnées
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relation avec User au lieu de Chauffeur
  users          User[]
  assignations   VehiculeAssignation[]
}

model VehiculeAssignation {
  id           String    @id @default(cuid())
  dateDebut    DateTime  @default(now())
  dateFin      DateTime?
  actif        Boolean   @default(true)
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  vehiculeId   String
  vehicule     Vehicule  @relation(fields: [vehiculeId], references: [id])
  
  // Assignation simplifiée - seulement User
  userId       String?
  user         User?   @relation(fields: [userId], references: [id])
}

model AvisClient {
  id          String   @id @default(cuid())
  note        Int      // Note sur 5
  commentaire String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
}

model Parametre {
  id        String   @id @default(cuid())
  cle       String   @unique
  valeur    String
  type      String   @default("string") // string, number, boolean, json
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
