import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function migrateRolesSql() {
  console.log('üîÑ Migration des r√¥les via SQL...')

  try {
    // Mise √† jour directe SQL des r√¥les
    console.log('üìù Mise √† jour ADMIN ‚Üí Admin')
    await prisma.$executeRaw`UPDATE User SET role = 'Admin' WHERE role = 'ADMIN'`

    console.log('üìù Mise √† jour PLANNEUR ‚Üí Planner')  
    await prisma.$executeRaw`UPDATE User SET role = 'Planner' WHERE role = 'PLANNEUR'`

    console.log('üìù Mise √† jour CHAUFFEUR ‚Üí Chauffeur')
    await prisma.$executeRaw`UPDATE User SET role = 'Chauffeur' WHERE role = 'CHAUFFEUR'`

    // Ajouter un statut par d√©faut aux chauffeurs
    console.log('üìù Ajout statut DISPONIBLE pour les chauffeurs')
    await prisma.$executeRaw`UPDATE User SET statut = 'DISPONIBLE' WHERE role = 'Chauffeur' AND statut IS NULL`

    console.log('‚úÖ Migration SQL termin√©e')

    // V√©rification
    const users = await prisma.user.findMany({
      orderBy: [{ role: 'asc' }, { nom: 'asc' }]
    })

    console.log('\nüìã √âtat des utilisateurs apr√®s migration:')
    users.forEach(user => {
      const status = user.statut ? ` (${user.statut})` : ''
      console.log(`   ${user.role}: ${user.nom.toUpperCase()}, ${user.prenom}${status}`)
    })

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration SQL:', error)
  } finally {
    await prisma.$disconnect()
  }
}

migrateRolesSql().catch(console.error)